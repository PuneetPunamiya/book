// Code generated by goa v3.2.4, DO NOT EDIT.
//
// book endpoints
//
// Command:
// $ goa gen book/design

package book

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "book" service endpoints.
type Endpoints struct {
	Create goa.Endpoint
	List   goa.Endpoint
}

// NewEndpoints wraps the methods of the "book" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Create: NewCreateEndpoint(s),
		List:   NewListEndpoint(s),
	}
}

// Use applies the given middleware to all the "book" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Create = m(e.Create)
	e.List = m(e.List)
}

// NewCreateEndpoint returns an endpoint function that calls the method
// "create" of service "book".
func NewCreateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*Book)
		res, err := s.Create(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedBook(res, "default")
		return vres, nil
	}
}

// NewListEndpoint returns an endpoint function that calls the method "list" of
// service "book".
func NewListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.List(ctx)
	}
}
