// Code generated by goa v3.2.4, DO NOT EDIT.
//
// book views
//
// Command:
// $ goa gen book/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// Book is the viewed result type that is projected based on a view.
type Book struct {
	// Type to project
	Projected *BookView
	// View to render
	View string
}

// BookView is a type that runs validations on a projected type.
type BookView struct {
	// ID of the book
	ID *uint32
	// Name of book
	Name *string
	// Description of the book
	Description *string
	// Price of the book
	Price *uint32
}

var (
	// BookMap is a map of attribute names in result type Book indexed by view name.
	BookMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"description",
			"price",
		},
	}
)

// ValidateBook runs the validations defined on the viewed result type Book.
func ValidateBook(result *Book) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateBookView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateBookView runs the validations defined on BookView using the
// "default" view.
func ValidateBookView(result *BookView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "result"))
	}
	if result.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "result"))
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 100, false))
		}
	}
	if result.Description != nil {
		if utf8.RuneCountInString(*result.Description) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.description", *result.Description, utf8.RuneCountInString(*result.Description), 100, false))
		}
	}
	return
}
