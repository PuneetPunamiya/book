// Code generated by goa v3.2.4, DO NOT EDIT.
//
// book HTTP client types
//
// Command:
// $ goa gen book/design

package client

import (
	book "book/gen/book"
	bookviews "book/gen/book/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "book" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// ID of the book
	ID uint32 `form:"id" json:"id" xml:"id"`
	// Name of book
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the book
	Description string `form:"description" json:"description" xml:"description"`
	// Price of the book
	Price uint32 `form:"price" json:"price" xml:"price"`
}

// CreateResponseBody is the type of the "book" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// ID of the book
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of book
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the book
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Price of the book
	Price *uint32 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// ListResponseBody is the type of the "book" service "list" endpoint HTTP
// response body.
type ListResponseBody []*BookResponse

// BookResponse is used to define fields on response body types.
type BookResponse struct {
	// ID of the book
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of book
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the book
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Price of the book
	Price *uint32 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "book" service.
func NewCreateRequestBody(p *book.Book) *CreateRequestBody {
	body := &CreateRequestBody{
		ID:          p.ID,
		Name:        p.Name,
		Description: p.Description,
		Price:       p.Price,
	}
	return body
}

// NewCreateBookCreated builds a "book" service "create" endpoint result from a
// HTTP "Created" response.
func NewCreateBookCreated(body *CreateResponseBody) *bookviews.BookView {
	v := &bookviews.BookView{
		ID:          body.ID,
		Name:        body.Name,
		Description: body.Description,
		Price:       body.Price,
	}

	return v
}

// NewListBookOK builds a "book" service "list" endpoint result from a HTTP
// "OK" response.
func NewListBookOK(body []*BookResponse) []*book.Book {
	v := make([]*book.Book, len(body))
	for i, val := range body {
		v[i] = unmarshalBookResponseToBookBook(val)
	}
	return v
}

// ValidateBookResponse runs the validations defined on BookResponse
func ValidateBookResponse(body *BookResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 100, false))
		}
	}
	return
}
