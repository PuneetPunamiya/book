// Code generated by goa v3.2.4, DO NOT EDIT.
//
// book HTTP server types
//
// Command:
// $ goa gen book/design

package server

import (
	book "book/gen/book"
	bookviews "book/gen/book/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "book" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// ID of the book
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of book
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the book
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Price of the book
	Price *uint32 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// CreateResponseBody is the type of the "book" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// ID of the book
	ID uint32 `form:"id" json:"id" xml:"id"`
	// Name of book
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the book
	Description string `form:"description" json:"description" xml:"description"`
	// Price of the book
	Price uint32 `form:"price" json:"price" xml:"price"`
}

// ListResponseBody is the type of the "book" service "list" endpoint HTTP
// response body.
type ListResponseBody []*BookResponse

// BookResponse is used to define fields on response body types.
type BookResponse struct {
	// ID of the book
	ID uint32 `form:"id" json:"id" xml:"id"`
	// Name of book
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the book
	Description string `form:"description" json:"description" xml:"description"`
	// Price of the book
	Price uint32 `form:"price" json:"price" xml:"price"`
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "book" service.
func NewCreateResponseBody(res *bookviews.BookView) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:          *res.ID,
		Name:        *res.Name,
		Description: *res.Description,
		Price:       *res.Price,
	}
	return body
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "book" service.
func NewListResponseBody(res []*book.Book) ListResponseBody {
	body := make([]*BookResponse, len(res))
	for i, val := range res {
		body[i] = marshalBookBookToBookResponse(val)
	}
	return body
}

// NewCreateBook builds a book service create endpoint payload.
func NewCreateBook(body *CreateRequestBody) *book.Book {
	v := &book.Book{
		ID:          *body.ID,
		Name:        *body.Name,
		Description: *body.Description,
		Price:       *body.Price,
	}

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 100, false))
		}
	}
	return
}
