// Code generated by goa v3.2.4, DO NOT EDIT.
//
// book HTTP client CLI support package
//
// Command:
// $ goa gen book/design

package cli

import (
	bookc "book/gen/http/book/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `book (create|list|update|remove)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` book create --body '{
      "description": "Books are human\'s best friend",
      "id": 1,
      "name": "book1",
      "price": 100
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		bookFlags = flag.NewFlagSet("book", flag.ContinueOnError)

		bookCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		bookCreateBodyFlag = bookCreateFlags.String("body", "REQUIRED", "")

		bookListFlags = flag.NewFlagSet("list", flag.ExitOnError)

		bookUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		bookUpdateBodyFlag = bookUpdateFlags.String("body", "REQUIRED", "")
		bookUpdateIDFlag   = bookUpdateFlags.String("id", "REQUIRED", "ID of the book")

		bookRemoveFlags  = flag.NewFlagSet("remove", flag.ExitOnError)
		bookRemoveIDFlag = bookRemoveFlags.String("id", "REQUIRED", "ID of book to remove")
	)
	bookFlags.Usage = bookUsage
	bookCreateFlags.Usage = bookCreateUsage
	bookListFlags.Usage = bookListUsage
	bookUpdateFlags.Usage = bookUpdateUsage
	bookRemoveFlags.Usage = bookRemoveUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "book":
			svcf = bookFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "book":
			switch epn {
			case "create":
				epf = bookCreateFlags

			case "list":
				epf = bookListFlags

			case "update":
				epf = bookUpdateFlags

			case "remove":
				epf = bookRemoveFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "book":
			c := bookc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = bookc.BuildCreatePayload(*bookCreateBodyFlag)
			case "list":
				endpoint = c.List()
				data = nil
			case "update":
				endpoint = c.Update()
				data, err = bookc.BuildUpdatePayload(*bookUpdateBodyFlag, *bookUpdateIDFlag)
			case "remove":
				endpoint = c.Remove()
				data, err = bookc.BuildRemovePayload(*bookRemoveIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// bookUsage displays the usage of the book command and its subcommands.
func bookUsage() {
	fmt.Fprintf(os.Stderr, `The book service gives details of the book.
Usage:
    %s [globalflags] book COMMAND [flags]

COMMAND:
    create: Adds a new book to the book store.
    list: List all entries
    update: Updating the existing book
    remove: Remove book from storage

Additional help:
    %s book COMMAND --help
`, os.Args[0], os.Args[0])
}
func bookCreateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] book create -body JSON

Adds a new book to the book store.
    -body JSON: 

Example:
    `+os.Args[0]+` book create --body '{
      "description": "Books are human\'s best friend",
      "id": 1,
      "name": "book1",
      "price": 100
   }'
`, os.Args[0])
}

func bookListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] book list

List all entries

Example:
    `+os.Args[0]+` book list
`, os.Args[0])
}

func bookUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] book update -body JSON -id UINT32

Updating the existing book
    -body JSON: 
    -id UINT32: ID of the book

Example:
    `+os.Args[0]+` book update --body '{
      "description": "Books are human\'s best friend",
      "name": "book1",
      "price": 100
   }' --id 1
`, os.Args[0])
}

func bookRemoveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] book remove -id UINT32

Remove book from storage
    -id UINT32: ID of book to remove

Example:
    `+os.Args[0]+` book remove --id 1949993046
`, os.Args[0])
}
